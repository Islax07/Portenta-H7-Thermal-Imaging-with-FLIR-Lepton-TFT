#include <Wire.h>
#include <SPI.h>
#include <Adafruit_GFX.h>
#include "Adafruit_ST7796S_kbv.h"

#define LeptonADDRESS  (0x2A)
#define VOSPI_FRAME_SIZE (164)
byte lepton_frame_packet[VOSPI_FRAME_SIZE];

#define LeptonWidth 80
#define LeptonHeight 60
#define ImageWidth 480  
#define ImageHeight 320  
#define EndCaptureFrame 59

#define TFT_CS 6
#define TFT_RST 14
#define TFT_DC 13
Adafruit_ST7796S_kbv tft = Adafruit_ST7796S_kbv(TFT_CS, TFT_DC, TFT_RST);




const uint16_t colormap_ironBow[433] =  {1, 2, 3, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 12, 13, 2061, 2061, 2062, 2062, 2062, 2062, 2062, 2062, 4111, 4111, 4111, 4111, 4111, 6159, 6160, 6160, 6160, 8208, 8208, 8208, 8208, 10257, 10257, 10257, 10257, 12305, 12305, 12305, 12305, 14353, 14354, 14354, 14354, 14354, 14354, 16402, 16402, 16402, 16402, 16402, 18450, 18450, 18450, 18450, 18450, 20498, 20499, 20499, 20499, 22547, 22547, 22547, 22547, 22547, 24595, 24595, 24595, 24595, 26643, 26643, 26643, 26643, 26643, 28691, 28691, 28691, 28691, 28691, 30739, 30739, 30739, 30739, 30739, 32787, 32787, 32787, 32787, 32787, 34835, 34835, 34835, 34835, 34835, 36883, 36883, 36883, 36883, 38931, 38931, 38931, 38931, 38931, 38931, 40979, 40979, 40979, 40979, 40979, 40979, 43027, 43027, 43027, 43027, 43027, 43027, 43027, 45075, 45075, 45074, 45074, 45074, 45074, 45074, 45074, 45074, 47122, 47154, 47154, 47154, 47154, 47154, 47154, 47154, 47154, 47154, 49202, 49202, 49234, 49234, 49233, 49233, 49233, 49265, 49265, 49265, 49265, 49265, 51345, 51344, 51344, 51344, 51344, 51376, 51376, 51376, 51376, 51407, 51407, 51407, 53455, 53455, 53486, 53486, 53486, 53486, 53518, 53517, 53517, 53517, 53549, 53548, 53548, 55596, 55628, 55628, 55627, 55659, 55659, 55658, 55658, 55690, 55689, 55689, 55688, 55720, 55720, 55719, 57767, 57798, 57798, 57798, 57797, 57829, 57828, 57828, 57828, 57859, 57859, 57859, 
57891, 57891, 57890, 57890, 57922, 57922, 59970, 60002, 60001, 60001, 60001, 60001, 60001, 60033, 60033, 60033, 60033, 60065, 60065, 60065, 60097, 60096, 60096, 60096, 60128, 60128, 60128, 60128, 60128, 60160, 60160, 60160, 62208, 62240, 62240, 62240, 62240, 62240, 62272, 62272, 62272, 62272, 62272, 62304, 62304, 62304, 62304, 62336, 62336, 62336, 62336, 62368, 62368, 62368, 62368, 62400, 62400, 62400, 62432, 62432, 62432, 62464, 62464, 62464, 62464, 62496, 62496, 62496, 64544, 64576, 64576, 64576, 64576, 64576, 64608, 64608, 64608, 64608, 64608, 64640, 64640, 64640, 64640, 64672, 64672, 64672, 64704, 64704, 64704, 64736, 64736, 64736, 64768, 64768, 64768, 64768, 64800, 64800, 64800, 64832, 64832, 64832, 64864, 64864, 64864, 64864, 64896, 64896, 64896, 64896, 64928, 64928, 64928, 64960, 64960, 64960, 64960, 64960, 64992, 64992, 64992, 65024, 65024, 65024, 65024, 65056, 65056, 65056, 65056, 65088, 65088, 65088, 65088, 65088, 65120, 65120, 65120, 65120, 65120, 65152, 65152, 65153, 65185, 65185, 65185, 65185, 65217, 65217, 65217, 65217, 65218, 65250, 65250, 65250, 65251, 65251, 65251, 65284, 65284, 65284, 65284, 65285, 65317, 65317, 65318, 65318, 65319, 65319, 65351, 65352, 65352, 65353, 65353, 65386, 65386, 65386, 65387, 65387, 65388, 65388, 65421, 65421, 65422, 65422, 65423, 65424, 65424, 65425, 65425, 65458, 65458, 65459, 65459, 65460, 65460, 65461, 65461, 65462, 65462, 65495, 65495, 65496, 65496, 65496, 65497, 65497, 65498, 65498, 65499, 65531, 65531, 65532, 65532, 65533, 65533, 65533, 65534, 65534, 65534
};

const uint16_t colormap_ISOtherm[433]={0xf7be, 0xf7be, 0xf79e, 0xf79e, 0xf79e, 0xf79e, 0xf79e, 0xef7d, 0xef7d, 0xef7d,0xef7d, 0xef7d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xe73c, 0xe73c,0xe73c, 0xe73c, 0xe73c, 0xe71c, 0xe71c, 0xe71c, 0xe71c, 0xe71c, 0xdefb, 0xdefb,0xdefb, 0xdefb, 0xdefb, 0xdefb, 0xdedb, 0xdedb, 0xdedb, 0xdedb, 0xdedb, 0xd6ba,0xd6ba, 0xd6ba, 0xd6ba, 0xd6ba, 0xd69a, 0xd69a, 0xd69a, 0xd69a, 0xd69a, 0xd69a,0xce79, 0xce79, 0xce79, 0xce79, 0xce79, 0xce59, 0xce59, 0xce59, 0xce59, 0xce59,0xc638, 0xc638, 0xc638, 0xc638, 0xc638, 0xc618, 0xc618, 0xc618, 0xc618, 0xc618,0xc618, 0xbdf7, 0xbdf7, 0xbdf7, 0xbdf7, 0xbdf7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7,0xbdd7, 
0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb596, 0xb596, 0xb596,0xb596, 0xb596, 0xad75, 0xad75, 0xad75, 0xad75, 0xad75, 0xad55, 0xad55, 0xad55,0xad55, 0xad55, 0xad55, 0xa534, 0xa534, 0xa534, 0xa534, 0xa534, 0xa514, 0xa514,0xa514, 0xa514, 0xa514, 0x9cf3, 0x9cf3, 0x9cf3, 0x9cf3, 0x9cf3, 0x9cd3, 0x9cd3,0x9cd3, 0x9cd3, 0x9cd3, 0x9cd3, 0x94b2, 0x94b2, 0x94b2, 0x94b2, 0x94b2, 0x9492,0x9492, 0x9492, 0x9492, 0x9492, 0x8c71, 0x8c71, 0x8c71, 0x8c71, 0x8c71, 0x8c71,0x8c51, 0x8c51, 0x8c51, 0x8c51, 0x8c51, 0x8430, 0x8430, 0x8430, 0x8430, 0x8430,0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x7bef, 0x7bef, 0x7bef, 0x7bef,0x7bef, 0x7bcf, 0x7bcf, 0x7bcf, 0x7bcf, 0x7bcf, 0x73ae, 0x73ae, 0x73ae, 0x73ae,0x73ae, 0x738e, 0x738e, 0x738e, 0x738e, 0x738e, 0x738e, 0x6b6d, 0x6b6d, 0x6b6d,0x6b6d, 0x6b6d, 0x6b4d, 0x6b4d, 0x6b4d, 0x6b4d, 0x6b4d, 0x632c, 0x632c, 0x632c,0x632c, 0x632c, 0x632c, 0x630c, 0x630c, 0x630c, 0x630c, 0x630c, 0x5aeb, 0x5aeb,0x5aeb, 0x5aeb, 0x5aeb, 0x5acb, 0x5acb, 0x5acb, 0x5acb, 0x5acb, 0x5acb, 0x52aa,0x52aa, 0x52aa, 0x52aa, 0x52aa, 0x528a, 0x528a, 0x528a, 0x528a, 0x528a, 0x4a69,0x4a69, 0x4a69, 0x4a69, 0x4a69, 0x4a69, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4a49,0x4228, 0x4228, 0x4228, 0x4228, 0x4228, 0x4208, 0x4208, 0x4208, 0x4208, 0x4208,0x39e7, 0x39e7, 0x39e7, 0x39e7, 0x39e7, 0x39e7, 0x39c7, 0x39c7, 0x39c7, 0x39c7,0x39c7, 0x31a6, 0x31a6, 0x31a6, 0x31a6, 0x31a6, 0x3186, 0x3186, 0x3186, 0x3186,0x3186, 0x3186, 0x2965, 0x2965, 0x2965, 0x2965, 0x2965, 0x2945, 0x2945, 0x2945,0x2945, 0x2945, 0x2124, 0x2124, 0x2124, 0x2124, 0x2124, 0x2124, 0x2104, 0x2104,0x2104, 0x2104, 0x2104, 0x18e3, 0x18e3, 0x18e3, 0x18e3, 0x18e3, 0x18c3, 0x18c3,0x18c3, 0x18c3, 0x18c3, 0x10a2, 0x10a2, 0x10a2, 0x10a2, 0x10a2, 0x10a2, 0x1082,0x1082, 0x1082, 0x1082, 0x1082, 0x0861, 0x0861, 0x0861, 0x0861, 0x0861, 0x0841,0x0841, 0x0841, 0x0841, 0x0841, 0x0841, 0x0841, 0x0841, 0x0841, 0x0841, 0x0841,0x0841, 0x0841, 0x0841, 0x0841, 0x0841, 0x0841, 0x0841, 0x3841, 0x4041, 0x4041,0x4841, 0x5041, 0x5041, 0x5861, 0x5861, 0x6061, 0x6861, 0x6861, 0x7082, 0x7882,0x7882, 0x8082, 0x8082, 0x8882, 0x90a2, 0x90a2, 0x98a2, 0xa0a2, 0xa0a2, 0xa8a2,0xa8c3, 0xb0c3, 0xb8c3, 0xb8c3, 0xc0c3, 0xc0c3, 0xc8e3, 0xd0e3, 0xd0e3, 0xe140,
0xe140, 0xe140, 0xe140, 0xe140, 0xe1c6, 0xe1c6, 0xe9e5, 0xea04, 0xea24, 0xf223,0xf242, 0xf262, 0xfa61, 0xfa80, 0xfaa0, 0xfaa0, 0xfac0, 0xfae0, 0xfb00, 0xfb00,0xfb20, 0xfb40, 0xfb40, 0xfb60, 0xfb80, 0xfba0, 0xfba0, 0xfbc0, 0xfbe0, 0xfbe0,0xfc00, 0xfc20, 0xfc40, 0xfc40, 0xfc60, 0xfc80, 0xfc80, 0xfca0, 0xfcc0, 0xfcc0,0xfce0, 0xfd00, 0xfd20, 0xfd20, 0xfd40, 0xfd60, 0xfd61, 0xfd82, 0xfda3, 0xfdc4,0xfdc5, 0xfde6, 0xfe07, 0xfe08, 0xfe29, 0xfe4a, 0xfe6b, 0xfe6c, 0xfe8d, 0xfeae,0xfeaf, 0xfecf, 0xfef0, 0xfef1, 0xff12, 0xff33, 0xff54, 0xff55, 0xff76, 0xff97,0xff98, 0xffb9, 0xffda
};

const uint16_t colormap_RAINBOW[433]={0x001f, 0x001f, 0x003f, 0x005f, 0x005f, 0x007f, 0x009f, 0x00bf, 0x00bf, 0x00df,0x00ff, 0x011f, 0x011f, 0x013f, 0x015f, 0x017f, 0x017f, 0x019f, 0x01bf, 0x01bf,0x01df, 0x01ff, 0x021f, 0x021f, 0x023f, 0x025f, 0x027f, 0x027f, 0x029f, 0x02bf,0x02df, 0x02df, 0x02ff, 0x031f, 0x033f, 0x033f, 0x035f, 0x037f, 0x037f, 0x039f,0x03bf, 0x03df, 0x03df, 0x03ff, 0x041f, 0x043f, 0x043f, 0x045f, 0x047f, 0x049f,0x049f, 0x04bf, 0x04df, 0x04ff, 0x04ff, 0x051f, 0x053f, 0x053f, 0x055f, 0x057f,0x059f, 0x059f, 0x05bf, 0x05df, 0x05ff, 0x05ff, 0x061f, 0x063f, 0x065f, 0x065f,0x067f, 0x069f, 0x06bf, 0x06bf, 0x06df, 0x06ff, 0x06ff, 0x071f, 0x073f, 0x075f,0x075f, 0x077f, 0x079f, 0x07bf, 0x07bf, 0x07df, 0x07ff, 0x07ff, 0x07ff, 0x07fe,0x07fe, 0x07fe, 0x07fd, 0x07fd, 0x07fd, 0x07fc, 0x07fc, 0x07fc, 0x07fb, 0x07fb,0x07fa, 0x07fa, 0x07fa, 0x07f9, 0x07f9, 0x07f9, 0x07f8, 0x07f8, 0x07f7, 0x07f7,0x07f7, 0x07f6, 0x07f6, 0x07f6, 0x07f5, 0x07f5, 0x07f5, 0x07f4, 0x07f4, 0x07f3,0x07f3, 0x07f3, 0x07f2, 0x07f2, 0x07f2, 0x07f1, 0x07f1, 0x07f1, 0x07f0, 0x07f0,0x07ef, 0x07ef, 0x07ef, 0x07ee, 0x07ee,
0x07ee, 0x07ed, 0x07ed, 0x07ec, 0x07ec,0x07ec, 0x07eb, 0x07eb, 0x07eb, 0x07ea, 0x07ea, 0x07ea, 0x07e9, 0x07e9, 0x07e8,0x07e8, 0x07e8, 0x07e7, 0x07e7, 0x07e7, 0x07e6, 0x07e6, 0x07e5, 0x07e5, 0x07e5,0x07e4, 0x07e4, 0x07e4, 0x07e3, 0x07e3, 0x07e3, 0x07e2, 0x07e2, 0x07e1, 0x07e1,0x07e1, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x0fe0, 0x0fe0, 0x0fe0, 0x17e0,0x17e0, 0x17e0, 0x1fe0, 0x1fe0, 0x1fe0, 0x27e0, 0x27e0, 0x2fe0, 0x2fe0, 0x2fe0,0x37e0, 0x37e0, 0x37e0, 0x3fe0, 0x3fe0, 0x47e0, 0x47e0, 0x47e0, 0x4fe0, 0x4fe0,0x4fe0, 0x57e0, 0x57e0, 0x57e0, 0x5fe0, 0x5fe0, 0x67e0, 0x67e0, 0x67e0, 0x6fe0,0x6fe0, 0x6fe0, 0x77e0, 0x77e0, 0x7fe0, 0x7fe0, 0x7fe0, 0x87e0, 0x87e0, 0x87e0,0x8fe0, 0x8fe0, 0x8fe0, 0x97e0, 0x97e0, 0x9fe0, 0x9fe0, 0x9fe0, 0xa7e0, 0xa7e0,0xa7e0, 0xafe0, 0xafe0, 0xb7e0, 0xb7e0, 0xb7e0, 0xbfe0, 0xbfe0, 0xbfe0, 0xc7e0,0xc7e0, 0xc7e0, 0xcfe0, 0xcfe0, 0xd7e0, 0xd7e0, 0xd7e0, 0xdfe0, 0xdfe0, 0xdfe0,0xe7e0, 0xe7e0, 0xefe0, 0xefe0, 0xefe0, 0xf7e0, 0xf7e0, 0xf7e0, 0xffe0, 0xffe0,0xffe0, 0xffc0, 0xffc0, 0xffa0, 0xff80, 0xff60, 0xff60, 0xff40, 0xff20, 0xff00,0xff00, 0xfee0, 0xfec0, 0xfec0, 0xfea0, 0xfe80, 0xfe60, 0xfe60, 0xfe40, 0xfe20,0xfe00, 0xfe00, 0xfde0, 0xfdc0, 0xfda0, 0xfda0, 0xfd80, 0xfd60, 0xfd40, 0xfd40,0xfd20, 0xfd00, 0xfd00, 0xfce0, 0xfcc0, 0xfca0, 0xfca0, 0xfc80, 0xfc60, 0xfc40,0xfc40, 0xfc20, 0xfc00, 0xfbe0, 0xfbe0, 0xfbc0, 0xfba0, 0xfba0, 0xfb80, 0xfb60,0xfb40, 0xfb40, 0xfb20, 0xfb00, 0xfae0, 0xfae0, 0xfac0, 0xfaa0, 0xfa80, 0xfa80,0xfa60, 0xfa40, 0xfa20, 0xfa20, 0xfa00, 0xf9e0, 0xf9e0, 0xf9c0, 0xf9a0, 0xf980,
0xf980, 0xf960, 0xf940, 0xf920, 0xf920, 0xf900, 0xf8e0, 0xf8c0, 0xf8c0, 0xf8a0,0xf880, 0xf860, 0xf860, 0xf840, 0xf820, 0xf820, 0xf800, 0xf800, 0xf800, 0xf800,0xf801, 0xf801, 0xf801, 0xf802, 0xf802, 0xf802, 0xf803, 0xf803, 0xf804, 0xf804,0xf804, 0xf805, 0xf805, 0xf805, 0xf806, 0xf806, 0xf806, 0xf807, 0xf807, 0xf807,0xf808, 0xf808, 0xf808, 0xf809, 0xf809, 0xf809, 0xf80a, 0xf80a, 0xf80a, 0xf80b,0xf80b, 0xf80b, 0xf80c, 0xf80c, 0xf80d, 0xf80d, 0xf80d, 0xf80e, 0xf80e, 0xf80e,0xf80f, 0xf80f, 0xf80f, 0xf810, 0xf810, 0xf810, 0xf811, 0xf811, 0xf811, 0xf812,0xf812, 0xf812, 0xf813, 0xf813, 0xf813, 0xf814, 0xf814, 0xf814, 0xf815, 0xf815,0xf816, 0xf816, 0xf816, 0xf817, 0xf817, 0xf817, 0xf818, 0xf818, 0xf818, 0xf819,0xf819, 0xf819, 0xf81a, 0xf81a, 0xf81a, 0xf81b, 0xf81b, 0xf81b, 0xf81c, 0xf81c,0xf81c, 0xf81d, 0xf81d};

const uint16_t colormap_RAINBOW_HC[433]={0x0012, 0x3012, 0x3032, 0x3032, 0x3052, 0x2852, 0x2872, 0x2872, 0x2892, 0x2892,0x28b2, 0x28d2, 0x28d2, 0x28f2, 0x28f2, 0x2912, 0x2912, 0x2932, 0x2932, 0x2952,0x2972, 0x2972, 0x2192, 0x2192, 0x21b2, 0x21b2, 0x21d2, 0x21d2, 0x21f2, 0x2212,0x2212, 0x2232, 0x2232, 0x2252, 0x2252, 0x2272, 0x2272, 0x2292, 0x22b2, 0x1ab2,0x1ad2, 0x1ad2, 0x1af2, 0x1af2, 0x1b12, 0x1b12, 0x1b32, 0x1b52, 0x1b52, 0x1b72,0x1b72, 0x1b92, 0x1b92, 0x1bb2, 0x1bb2, 0x1bd2, 0x1bf2, 0x13f2, 0x1412, 0x1412,0x1432, 0x1432, 0x1452, 0x1452, 0x1472, 0x1492, 0x1492, 0x14b2, 0x14b2, 0x14d2,0x14d2, 0x14f2, 0x14f2, 0x1512, 0x0d32, 0x0d32, 0x0d52, 0x0d52, 0x0d72, 0x0d72,0x0d92, 0x0d92, 0x0db2, 0x0dd2, 0x0dd2, 0x0df2, 0x0df2, 0x0e12, 0x0e12, 0x0e32,0x0e32, 0x0652, 0x0652, 0x0672, 0x0692, 0x0692, 0x06b2, 0x06b2, 0x06d2, 0x06d2,0x06f2, 0x06f2, 0x0712, 0x0732, 0x0732, 0x0752, 0x0752, 0x0772, 0x0772, 0x0792,0x0792, 0x0791, 0x0791, 0x0791, 0x0791, 0x0790, 0x0790, 0x0790, 0x078f, 0x078f,0x078f, 0x078f, 0x078e, 0x078e, 0x078e, 0x078d, 0x078d, 0x078d, 0x078d, 0x078c,0x078c, 0x078c, 0x078b, 0x078b, 0x078b, 0x078b, 0x078a, 0x078a, 0x078a, 0x0789,0x0789, 0x0789, 0x0789, 0x0788, 0x0788, 0x0788, 0x0787, 0x0787, 0x0787, 0x0786,0x0786, 0x0786, 0x0786, 0x0785, 0x0785, 0x0785, 0x0784, 0x0784, 0x0784, 0x0784,0x0783, 0x0783, 0x0783, 0x0782, 0x0782, 0x0782, 0x0782, 0x0781, 0x0781, 0x0781,0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0780, 0x0f80, 0x0f80, 0x1780, 0x1780,0x1f80, 0x1f80, 0x2780, 0x2780, 0x2f80, 0x2f80, 0x3780, 0x3780,
0x3f80, 0x3f80,0x4780, 0x4780, 0x4f80, 0x4f80, 0x5780, 0x5780, 0x5f80, 0x5f80, 0x6780, 0x6780,0x6f80, 0x6f80, 0x7780, 0x7780, 0x7f80, 0x7f80, 0x8780, 0x8780, 0x8f80, 0x8f80,0x9780, 0x9780, 0x9f80, 0x9f80, 0xa780, 0xa780, 0xaf80, 0xaf80, 0xaf80, 0xb780,0xb780, 0xbf80, 0xbf80, 0xc780, 0xc780, 0xcf80, 0xcf80, 0xd780, 0xd780, 0xdf80,0xdf80, 0xe780, 0xe780, 0xef80, 0xef80, 0xf780, 0xf780, 0xff80, 0xff80, 0xff60,
0xff40, 0xff20, 0xff00, 0xfee0, 0xfec0, 0xfea0, 0xfe80, 0xfe60, 0xfe40, 0xfe20,0xfe20, 0xfe00, 0xfde0, 0xfdc0, 0xfda0, 0xfd80, 0xfd60, 0xfd40, 0xfd20, 0xfd00,0xfce0, 0xfcc0, 0xfca0, 0xfca0, 0xfc80, 0xfc60, 0xfc40, 0xfc20, 0xfc00, 0xfbe0,0xfbc0, 0xfba0, 0xfb80, 0xfb60, 0xfb40, 0xfb20, 0xfb20, 0xfb00, 0xfae0, 0xfac0,0xfaa0, 0xfa80, 0xfa60, 0xfa40, 0xfa20, 0xfa00, 0xf9e0, 0xf9c0, 0xf9a0, 0xf9a0,0xf980, 0xf960, 0xf940, 0xf920, 0xf900, 0xf8e0, 0xf8c0, 0xf8a0, 0xf880, 0xf860,0xf840, 0xf820, 0xf820, 0xf800, 0xf800, 0xf800, 0xf820, 0xf820, 0xf841, 0xf841,0xf861, 0xf861, 0xf881, 0xf882, 0xf8a2, 0xf8a2, 0xf8c2, 0xf8c2, 0xf8e3, 0xf8e3,0xf903, 0xf903, 0xf924, 0xf924, 0xf944, 0xf944, 0xf964, 0xf965, 0xf965, 0xf985,0xf985, 0xf9a5, 0xf9a6, 0xf9c6, 0xf9c6, 0xf9e6, 0xf9e6, 0xfa07, 0xfa07, 0xfa27,0xfa27, 0xfa48, 0xfa48, 0xfa68, 0xfa68, 0xfa88, 0xfa89, 0xfaa9, 0xfaa9, 0xfac9,0xfac9, 0xfaea, 0xfaea, 0xfb0a, 0xfb0a, 0xfb0a, 0xfb2b, 0xfb2b, 0xfb4b, 0xfb4b,0xfb6c, 0xfb6c, 0xfb8c, 0xfb8c, 0xfbac, 0xfbad, 0xfbcd, 0xfbcd, 0xfbed, 0xfbed,0xfc0e, 0xfc0e, 0xfc2e, 0xfc2e, 0xfc4f, 0xfc4f, 0xfc6f, 0xfc6f, 0xfc8f, 0xfc90,0xfc90, 0xfcb0, 0xfcb0, 0xfcd0, 0xfcd1, 0xfcf1, 0xfcf1, 0xfd11, 0xfd11, 0xfd32,0xfd32, 0xfd52, 0xfd52, 0xfd73, 0xfd73, 0xfd93, 0xfd93, 0xfdb3, 0xfdb4, 0xfdd4,0xfdd4, 0xfdf4, 0xfdf4, 0xfe15, 0xfe15, 0xfe35, 0xfe35, 0xfe35, 0xfe56, 0xfe56,0xfe76, 0xfe76, 0xfe97, 0xfe97, 0xfeb7, 0xfeb7, 0xfed7, 0xfed8, 0xfef8, 0xfef8,0xff18, 0xff18, 0xff39, 0xff39, 0xff59, 0xff59, 0xff7a, 0xff7a, 0xff9a, 0xff9a,0xffba, 0xffbb, 0xffdb
};

const uint16_t colormap_WhiteHot[433]={0x0841, 0x0841, 0x0841, 0x0841, 0x0841, 0x0841, 0x0841, 0x0841, 0x0841, 0x0841,0x0841, 0x0841, 0x0841, 0x0841, 0x0841, 0x0841, 0x0841, 0x0841, 0x0841, 0x0841,0x0841, 0x0841, 0x0841, 0x0861, 0x0861, 0x0861, 0x0861, 0x0861, 0x0861, 0x0861,0x1082, 0x1082, 0x1082, 0x1082, 0x1082, 0x1082, 0x1082, 0x10a2, 0x10a2, 0x10a2,0x10a2, 0x10a2, 0x10a2, 0x10a2, 0x10a2, 0x18c3, 0x18c3, 0x18c3, 0x18c3, 0x18c3,0x18c3, 0x18c3, 0x18e3, 0x18e3, 0x18e3, 0x18e3, 0x18e3, 0x18e3, 0x18e3, 0x2104,0x2104, 0x2104, 0x2104, 0x2104, 0x2104, 0x2104, 0x2104, 0x2124, 0x2124, 0x2124,0x2124, 0x2124, 0x2124, 0x2124, 0x2945, 0x2945, 0x2945, 0x2945, 0x2945, 0x2945,0x2945, 0x2945, 0x2965, 0x2965, 0x2965, 0x2965, 0x2965, 0x2965, 0x2965, 0x3186,0x3186, 0x3186, 0x3186, 0x3186, 0x3186, 0x3186, 0x31a6, 0x31a6, 0x31a6, 0x31a6,0x31a6, 0x31a6, 0x31a6, 0x31a6, 0x39c7, 0x39c7, 0x39c7, 0x39c7, 0x39c7, 0x39c7,0x39c7, 0x39e7, 0x39e7, 0x39e7, 0x39e7, 0x39e7, 0x39e7, 0x39e7, 0x4208, 0x4208,0x4208, 0x4208, 0x4208, 0x4208, 0x4208, 0x4208, 0x4228, 0x4228, 0x4228, 0x4228,
0x4228, 0x4228, 0x4228, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4a49,0x4a49, 0x4a69, 0x4a69, 0x4a69, 0x4a69, 0x4a69, 0x4a69, 0x4a69, 0x528a, 0x528a,0x528a, 0x528a, 0x528a, 0x528a, 0x528a, 0x52aa, 0x52aa, 0x52aa, 0x52aa, 0x52aa,0x52aa, 0x52aa, 0x52aa, 0x5acb, 0x5acb, 0x5acb, 0x5acb, 0x5acb, 0x5acb, 0x5acb,0x5aeb, 0x5aeb, 0x5aeb, 0x5aeb, 0x5aeb, 0x5aeb, 0x5aeb, 0x630c, 0x630c, 0x630c,0x630c, 0x630c, 0x630c, 0x630c, 0x630c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c,0x632c, 0x632c, 0x6b4d, 0x6b4d, 0x6b4d, 0x6b4d, 0x6b4d, 0x6b4d, 0x6b4d, 0x6b6d,0x6b6d, 0x6b6d, 0x6b6d, 0x6b6d, 0x6b6d, 0x6b6d, 0x6b6d, 0x738e, 0x738e, 0x738e,0x738e, 0x738e, 0x738e, 0x738e, 0x73ae, 0x73ae, 0x73ae, 0x73ae, 0x73ae, 0x73ae,0x73ae, 0x73ae, 0x7bcf, 0x7bcf, 0x7bcf, 0x7bcf, 0x7bcf, 0x7bcf, 0x7bcf, 0x7bef,0x7bef, 0x7bef, 0x7bef, 0x7bef, 0x7bef, 0x7bef, 0x8410, 0x8410, 0x8410, 0x8410,0x8410, 0x8410, 0x8410, 0x8410, 0x8430, 0x8430, 0x8430, 0x8430, 0x8430, 0x8430,0x8430, 0x8c51, 0x8c51, 0x8c51, 0x8c51, 0x8c51, 0x8c51, 0x8c51, 0x8c71, 0x8c71,0x8c71, 0x8c71, 0x8c71, 0x8c71, 0x8c71, 
0x8c71, 0x9492, 0x9492, 0x9492, 0x9492,0x9492, 0x9492, 0x9492, 0x94b2, 0x94b2, 0x94b2, 0x94b2, 0x94b2, 0x94b2, 0x94b2,0x94b2, 0x9cd3, 0x9cd3, 0x9cd3, 0x9cd3, 0x9cd3, 0x9cd3, 0x9cd3, 0x9cf3, 0x9cf3,0x9cf3, 0x9cf3, 0x9cf3, 0x9cf3, 0x9cf3, 0xa514, 0xa514, 0xa514, 0xa514, 0xa514,0xa514, 0xa514, 0xa514, 0xa534, 0xa534, 0xa534, 0xa534, 0xa534, 0xa534, 0xa534,0xad55, 0xad55, 0xad55, 0xad55, 0xad55, 0xad55, 0xad55, 0xad75, 0xad75, 0xad75,0xad75, 0xad75, 0xad75, 0xad75, 0xad75, 0xb596, 0xb596, 0xb596, 0xb596, 0xb596,0xb596, 0xb596, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6,0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdf7, 0xbdf7, 0xbdf7,0xbdf7, 0xbdf7, 0xbdf7, 0xbdf7, 0xc618, 0xc618, 0xc618, 0xc618, 0xc618, 0xc618,0xc618, 0xc618, 0xc638, 0xc638, 0xc638, 0xc638, 0xc638, 0xc638, 0xc638, 0xce59,0xce59, 0xce59, 0xce59, 0xce59, 0xce59, 0xce59, 0xce79, 0xce79, 0xce79, 0xce79,0xce79, 0xce79, 0xce79, 0xce79, 0xd69a, 0xd69a, 0xd69a, 0xd69a, 0xd69a, 0xd69a,0xd69a, 0xd6ba, 0xd6ba, 0xd6ba, 0xd6ba, 0xd6ba, 0xd6ba, 0xd6ba, 0xdedb, 0xdedb,0xdedb, 0xdedb, 0xdedb, 0xdedb, 0xdedb, 0xdedb, 0xdefb, 0xdefb, 0xdefb, 0xdefb,0xdefb, 0xdefb, 0xdefb, 0xe71c, 0xe71c, 0xe71c, 0xe71c, 0xe71c, 0xe71c, 0xe71c,0xe71c, 0xe73c, 0xe73c, 0xe73c, 0xe73c, 0xe73c, 0xe73c, 0xe73c, 0xef5d, 0xef5d,0xef5d, 0xef5d, 0xef5d
};

const uint16_t colormap_BlackHot[433]={0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xe73c, 0xe73c, 0xe73c, 0xe73c,0xe73c, 0xe73c, 0xe73c, 0xe71c, 0xe71c, 0xe71c, 0xe71c, 0xe71c, 0xe71c, 0xe71c,0xe71c, 0xdefb, 0xdefb, 0xdefb, 0xdefb, 0xdefb, 0xdefb, 0xdefb, 0xdedb, 0xdedb,0xdedb, 0xdedb, 0xdedb, 0xdedb, 0xdedb, 0xdedb, 0xd6ba, 0xd6ba, 0xd6ba, 0xd6ba,0xd6ba, 0xd6ba, 0xd6ba, 0xd69a, 0xd69a, 0xd69a, 0xd69a, 0xd69a, 0xd69a, 0xd69a,0xce79, 0xce79, 0xce79, 0xce79, 0xce79, 0xce79, 0xce79, 0xce79, 0xce59, 0xce59,0xce59, 0xce59, 0xce59, 0xce59, 0xce59, 0xc638, 0xc638, 0xc638, 0xc638, 0xc638,0xc638, 0xc638, 0xc618, 0xc618, 0xc618, 0xc618, 0xc618, 0xc618, 0xc618, 0xc618,0xbdf7, 0xbdf7, 0xbdf7, 0xbdf7, 0xbdf7, 0xbdf7, 0xbdf7, 0xbdd7, 0xbdd7, 0xbdd7,0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6,0xb5b6, 0xb5b6, 0xb596, 0xb596, 0xb596, 0xb596, 0xb596, 0xb596, 0xb596, 0xad75,0xad75, 0xad75, 0xad75, 0xad75, 0xad75, 0xad75, 0xad75, 0xad55, 0xad55, 0xad55,0xad55, 0xad55, 0xad55, 0xad55, 0xa534, 0xa534, 0xa534, 0xa534, 0xa534, 0xa534,0xa534, 0xa514, 0xa514, 0xa514, 0xa514, 0xa514, 0xa514, 0xa514, 0xa514, 0x9cf3,0x9cf3, 0x9cf3, 0x9cf3, 0x9cf3, 0x9cf3, 0x9cf3, 0x9cd3, 0x9cd3, 0x9cd3, 0x9cd3,0x9cd3, 0x9cd3, 0x9cd3, 0x94b2, 0x94b2, 0x94b2, 0x94b2, 0x94b2, 0x94b2, 0x94b2,0x94b2, 0x9492, 0x9492, 0x9492, 0x9492, 0x9492, 0x9492, 0x9492, 
0x8c71, 0x8c71,0x8c71, 0x8c71, 0x8c71, 0x8c71, 0x8c71, 0x8c71, 0x8c51, 0x8c51, 0x8c51, 0x8c51,0x8c51, 0x8c51, 0x8c51, 0x8430, 0x8430, 0x8430, 0x8430, 0x8430, 0x8430, 0x8430,0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x7bef, 0x7bef,0x7bef, 0x7bef, 0x7bef, 0x7bef, 0x7bef, 0x7bcf, 0x7bcf, 0x7bcf, 0x7bcf, 0x7bcf,0x7bcf, 0x7bcf, 0x73ae, 0x73ae, 0x73ae, 0x73ae, 0x73ae, 0x73ae, 0x73ae, 0x73ae,0x738e, 0x738e, 0x738e, 0x738e, 0x738e, 0x738e, 0x738e, 0x6b6d, 0x6b6d, 0x6b6d,0x6b6d, 0x6b6d, 0x6b6d, 0x6b6d, 0x6b6d, 0x6b4d, 0x6b4d, 0x6b4d, 0x6b4d, 0x6b4d,0x6b4d, 0x6b4d, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x632c, 0x630c,0x630c, 0x630c, 0x630c, 0x630c, 0x630c, 0x630c, 0x630c, 0x5aeb, 0x5aeb, 0x5aeb,
0x5aeb, 0x5aeb, 0x5aeb, 0x5aeb, 0x5acb, 0x5acb, 0x5acb, 0x5acb, 0x5acb, 0x5acb,0x5acb, 0x52aa, 0x52aa, 0x52aa, 0x52aa, 0x52aa, 0x52aa, 0x52aa, 0x52aa, 0x528a,0x528a, 0x528a, 0x528a, 0x528a, 0x528a, 0x528a, 0x4a69, 0x4a69, 0x4a69, 0x4a69,0x4a69, 0x4a69, 0x4a69, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4a49,0x4a49, 0x4228, 0x4228, 0x4228, 0x4228, 0x4228, 0x4228, 0x4228, 0x4208, 0x4208,0x4208, 0x4208, 0x4208, 0x4208, 0x4208, 0x4208, 0x39e7, 0x39e7, 0x39e7, 0x39e7,0x39e7, 0x39e7, 0x39e7, 0x39c7, 0x39c7, 0x39c7, 0x39c7, 0x39c7, 0x39c7, 0x39c7,0x31a6, 0x31a6, 0x31a6, 0x31a6, 0x31a6, 0x31a6, 0x31a6, 0x31a6, 0x3186, 0x3186,0x3186, 0x3186, 0x3186, 0x3186, 0x3186, 0x2965, 0x2965, 0x2965, 0x2965, 0x2965,0x2965, 0x2965, 0x2945, 0x2945, 0x2945, 0x2945, 0x2945, 0x2945, 0x2945, 0x2945,0x2124, 0x2124, 0x2124, 0x2124, 0x2124, 0x2124, 0x2124, 0x2104, 0x2104, 0x2104,0x2104, 0x2104, 0x2104, 0x2104, 0x2104, 0x18e3, 0x18e3, 0x18e3, 0x18e3, 0x18e3,0x18e3, 0x18e3, 0x18c3, 0x18c3, 0x18c3, 0x18c3, 0x18c3, 0x18c3, 0x18c3, 0x10a2,0x10a2, 0x10a2, 0x10a2, 0x10a2, 0x10a2, 0x10a2, 0x10a2, 0x1082, 0x1082, 0x1082,0x1082, 0x1082, 0x1082, 0x1082, 0x0861, 0x0861, 0x0861, 0x0861, 0x0861, 0x0861,0x0861, 0x0841, 0x0841, 0x0841, 0x0841, 0x0841, 0x0841, 0x0841, 0x0841, 0x0841,0x0841, 0x0841, 0x0841, 0x0841, 0x0841, 0x0841, 0x0841, 0x0841, 0x0841, 0x0841,0x0841, 0x0841, 0x0841
};

const uint16_t colormap_ARTIC[433]={0x01f2, 0x01f2, 0x01f3, 0x0213, 0x0213, 0x0233, 0x0233, 0x0233, 0x0253, 0x0a53,0x0a73, 0x0a73, 0x0a94, 0x0a94, 0x0a94, 0x0ab4, 0x0ab4, 0x12d4, 0x12d4, 0x12d4,0x12f4, 0x12f4, 0x1315, 0x1315, 0x1315, 0x1b35, 0x1b35, 0x1b55, 0x1b55, 0x1b55,0x1b75, 0x1b75, 0x1b96, 0x1b96, 0x2396, 0x23b6, 0x23b6, 0x23d6, 0x23d6, 0x23d6,0x23f6, 0x23f6, 0x2c17, 0x2c17, 0x2c37, 0x2c37, 0x2c37, 0x2c57, 0x2c57, 0x2c77,0x3477, 0x3478, 0x3498, 0x3498, 0x34b8, 0x34b8, 0x34b8, 0x34d8, 0x34d8, 0x3cf8,0x3cf8, 0x3cf9, 0x3d19, 0x3d19, 0x3d39, 0x3d39, 0x3d39, 0x4559, 0x4559, 0x4579,0x4579, 0x459a, 0x459a, 0x459a, 0x45ba, 0x4dba, 0x4dda, 0x4dda, 0x4dda, 0x4dfa,0x4dfa, 0x4e1b, 0x4e1b, 0x4e1b, 0x563b, 0x563b, 0x565b, 0x565b, 0x563b, 0x563b,0x563b, 0x563a, 0x5e3a, 0x5e3a, 0x5e1a, 0x5e1a, 0x5e1a, 0x5e19, 0x5e19, 0x5df9,0x65f9, 0x65f9, 0x65f9, 0x65f8, 0x65d8, 0x65d8, 0x65d8, 0x65d8, 0x65d8, 0x6db7,0x6db7, 0x6db7, 0x6db7, 0x6db7, 0x6d97, 0x6d96, 0x6d96, 0x7596, 0x7596, 0x7596,0x7576, 0x7575, 0x7575, 0x7575, 0x7575, 0x7d55, 0x7d55, 0x7d54, 0x7d54, 0x7d54,0x7d34, 0x7d34, 0x7d34, 0x7d34, 0x8533, 0x8513, 0x8513, 0x8513, 0x8513, 0x8513,0x84f2, 0x84f2, 0x8cf2, 0x8cf2, 0x8cf2, 0x8cf2, 0x8cd1, 0x8cd1, 0x8cd1, 0x8cd1,0x94d1, 0x94b1, 0x94b0, 0x94b0, 0x94b0, 0x94b0, 0x9490, 0x9490, 0x9c8f, 0x9c8f,0x9c8f, 0x9c6f, 0x9c6f, 0x9c6f, 0x9c6e, 0x9c6e, 0x9c4e, 0xa44e, 0xa44e, 0xa44e,0xa44d, 0xa44d, 0xa42d, 0xa42d, 0xa42d, 0xac2d, 0xac2c, 0xac0c, 0xac0c, 0xac0c,0xac0c, 0xac0c, 0xabeb, 0xb3eb, 0xb3eb, 0xb3eb, 0xb3eb, 0xb3cb, 0xb3cb, 0xb3ca,0xb3ca, 0xb3ca, 0xbbaa, 0xbbaa, 0xbbaa, 0xbba9, 0xbba9, 0xbba9, 0xbb89,
0xbb89,0xc389, 0xc388, 0xc388, 0xc368, 0xc368, 0xc368, 0xc368, 0xc367, 0xcb47, 0xcb47,0xcb47, 0xcb47, 0xcb47, 0xcb26, 0xcb26, 0xcb26, 0xcb26, 0xd326, 0xd326, 0xd326,0xd326, 0xd326, 0xd326, 0xd326, 0xd326, 0xdb26, 0xdb26, 0xdb26, 0xdb26, 0xdb26,
0xdb26, 0xdb26, 0xdb26, 0xe326, 0xe326, 0xe326, 0xe326, 0xe326, 0xe326, 0xe326,0xe326, 0xe326, 0xeb26, 0xeb26, 0xeb26, 0xeb26, 0xeb26, 0xeb26, 0xeb26, 0xeb26,0xf326, 0xf326, 0xf326, 0xf326, 0xf326, 0xf326, 0xf326, 0xf326, 0xfb26, 0xfb26,0xfb26, 0xfb26, 0xfb26, 0xfb26, 0xfb26, 0xfb26, 0xfb26, 0xfb26, 0xfb26, 0xfb26,0xfb26, 0xfb26, 0xfb26, 0xfb26, 0xfb26, 0xfb26, 0xfb26, 0xfb26, 0xfb26, 0xfb26,0xfb26, 0xfb26, 0xfb26, 0xfb26, 0xfb26, 0xfb26, 0xfb26, 0xfb26, 0xfb26, 0xfb26,0xfb26, 0xfb26, 0xfb26, 0xfb26, 0xfb26, 0xfb26, 0xfb26, 0xfb26, 0xfb26, 0xfb26,0xfb26, 0xfb26, 0xfb26, 0xfb26, 0xfb26, 0xfb26, 0xfb26, 0xfb26, 0xfb26, 0xfb26,0xfb26, 0xfb26, 0xfb26, 0xfb26, 0xfb26, 0xfb26, 0xfb26, 0xfb27, 0xfb27, 0xfb27,0xfb27, 0xfb27, 0xfb27, 0xfb27, 0xfb27, 0xfb47, 0xfb48, 0xfb68, 0xfb68, 0xfb68,0xfb88, 0xfb88, 0xfba8, 0xfba8, 0xfba9, 0xfbc9, 0xfbc9, 0xfbe9, 0xfbe9, 0xfc09,0xfc09, 0xfc09, 0xfc2a, 0xfc2a, 0xfc4a, 0xfc4a, 0xfc4a, 0xfc6a, 0xfc6a, 0xfc8a,0xfc8b, 0xfc8b, 0xfcab, 0xfcab, 0xfccb, 0xfccb, 0xfccb, 0xfceb, 0xfcec, 0xfd0c,0xfd0c, 0xfd0c, 0xfd2c, 0xfd2c, 0xfd4c, 0xfd4c, 0xfd4d, 0xfd6d, 0xfd6d, 0xfd8d,0xfd8d, 0xfd8d, 0xfdad, 0xfdad, 0xfdce, 0xfdce, 0xfdce, 0xfdee, 0xfdee, 0xfe0e,0xfe0e, 0xfe0e, 0xfe2e, 0xfe2f, 0xfe4f, 0xfe4f, 0xfe6f, 0xfe6f, 0xfe6f, 0xfe8f,0xfe8f, 0xfeb0, 0xfeb0, 0xfeb0, 0xfed0, 0xfed0, 0xfef0, 0xfef0, 0xfef0, 0xff11,0xff11, 0xff31, 0xff31, 0xff31, 0xff51, 0xff51, 0xff71, 0xff72, 0xff72, 0xff92,0xff92, 0xff92, 0xff92, 0xff92, 0xff92, 0xff93, 0xff93, 0xff93, 0xff93, 0xff93,0xff93, 0xff93, 0xff93, 0xff94, 0xff94, 0xff94, 0xff94, 0xff94, 0xff94, 0xff94,0xff94, 0xff95, 0xff95
};


uint16_t image[LeptonWidth][LeptonHeight];
bool DoneCapturing = false;
void AutomaticGainControl();
void SYNC();
void ReadFrame();
void BufferImage();

void setup() {
    Wire.begin();
    pinMode(7, OUTPUT);
    SPI.begin();
    SPI.beginTransaction(SPISettings(20000000, MSBFIRST, SPI_MODE3));
    tft.begin();
    tft.setRotation(1);
    tft.fillScreen(0);
    AutomaticGainControl();
}

void loop() {
    SYNC();
    delay(50);
    DoneCapturing = false;
  
    while (!DoneCapturing) {
        ReadFrame();
        BufferImage();
    }

    int min = 65535; 
    int max = 0;     
    for (int j = 0; j < LeptonHeight; j++) {
        for (int i = 0; i < LeptonWidth; i++) {
          uint16_t value=image[i][j];
            if (value < min) {
                min = value;
            }
            if (value > max) {
                max = value;
            }
        }
    }
    
    int xStart = (tft.width() - ImageWidth) / 2; 
    int yStart = (tft.height() - ImageHeight) / 2;
    for (int j = 0; j < LeptonHeight; j++) {
        for (int i = 0; i < LeptonWidth; i++) {
          uint16_t value=image[i][j];
    
            int scaled_value = (433 * (value - min)) / (max - min);

            if (scaled_value < 0) {
                scaled_value = 0;
            }
            if (scaled_value > 433) {
                scaled_value = 433;
            }

      int x = xStart + (i * 6); 
      int y = yStart + (j * 6);  
      tft.fillRect(x, y, 6, 6, color);

        }
    }
}


void AutomaticGainControl() {
    byte error;
    Wire.beginTransmission(LeptonADDRESS);
    Wire.write(0x01);
    Wire.write(0x05);
    Wire.write(0x00);
    Wire.write(0x01);
    error = Wire.endTransmission();
}

void BufferImage() {
    int j = lepton_frame_packet[1];
    for (int i = 0; i < LeptonWidth; i++) {
        image[i][j] = ((lepton_frame_packet[2 * i + 4] << 8) + lepton_frame_packet[2 * i + 5]);
    }
    if (j == EndCaptureFrame) {
        DoneCapturing = true;
    }
}

void SYNC() {
    int data = 0x0f;
    digitalWrite(7, HIGH);
    delay(185);
    while ((data & 0x0f) == 0x0f) {
        digitalWrite(7, LOW);
        data = SPI.transfer(0x00) << 8;
        data |= SPI.transfer(0x00);
        digitalWrite(7, HIGH);

        for (int i = 0; i < ((VOSPI_FRAME_SIZE - 2) / 2); i++) {
            digitalWrite(7, LOW);
            SPI.transfer(0x00);
            SPI.transfer(0x00);
            digitalWrite(7, HIGH);
        }
    }
}

void ReadFrame() {
    for (int i = 0; i < (VOSPI_FRAME_SIZE / 2); i++) {
        digitalWrite(7, LOW);
        lepton_frame_packet[2 * i] = SPI.transfer(0x00);
        lepton_frame_packet[2 * i + 1] = SPI.transfer(0x00);
        digitalWrite(7, HIGH);
    }
}

